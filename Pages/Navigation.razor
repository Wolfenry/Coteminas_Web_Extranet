@page "/"

@if (!fRender)
{
    @if (vendedor)
    {
        <div class="d-flex justify-content-center w-100 m-5">
            <div class="card shadow-sm p-3" @onclick="@(()=>navManager.NavigateTo("/admpedidos"))">
                <img src="../img/truck.svg" />
                <div class="card-body" style="padding: 4px;">
                    <DropdownDivider />
                    <p class="card-title">Administración de Pedidos</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card-deck flex-row justify-content-center text-center m-5">

            <div class="card shadow-sm p-5" @onclick="@(()=>navManager.NavigateTo("/admpedidos"))">
                <img src="../img/truck.svg" />
                <div class="card-body" style="padding: 4px;">
                    <DropdownDivider />
                    <p class="card-title">Administración de Pedidos</p>
                </div>
            </div>

            <div class="card shadow-sm p-5" @onclick="@(()=>navManager.NavigateTo("/stockart"))">
                <img src="../img/stock.svg" />
                <div class="card-body" style="padding: 4px;">
                    <DropdownDivider />
                    <p class="card-title">Stock de Artículos</p>
                </div>
            </div>

            <div class="card shadow-sm p-5" @onclick="@(()=>navManager.NavigateTo("/recepciones"))">
                <img src="../img/receipt2.svg" />
                <div class="card-body" style="padding: 4px;">
                    <DropdownDivider />
                    <p class="card-title">Detalle de Recepciones</p>
                </div>
            </div>

            <div class="card shadow-sm p-5" @onclick="@(()=>navManager.NavigateTo("/estadisticas"))">
                <img src="../img/chart.svg" />
                <div class="card-body" style="padding: 4px;">
                    <DropdownDivider />
                    <p class="card-title">Estadísticas</p>
                </div>
            </div>

        </div>
    }
}

<footer class="footer">
    <div class="container text-center">
        <span class="text-muted">Todos los derechos reservados © 2021 | Loginter <img src="img/loginter.png" style="height: 48px;" /></span>
    </div>
</footer>


@code {
    string user = "";
    bool fRender = true; //reemplazo de firstRender
    bool vendedor;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (fRender)
        {
            await ValidarUsuario();
            StateHasChanged();

        }
        StateHasChanged();

    }

    void ValidarVendedor()
    {
        string rpte = "";

        foreach (oAtributo item in Session.Atributos)
        {
            if (item.Atributo == "Representante")
            {
                rpte = item.Valor;
            }
        }

        if (rpte == "TODOS" || rpte == null)
        {
            vendedor = false;
        }
        else
        {
            vendedor = true;
        }

        StateHasChanged();
    }

    async Task ValidarUsuario()
    {
        string permisoAcceso = await oConfig.ObtenerVariable("PermisoAcceso");
        string permisoComercial = await oConfig.ObtenerVariable("PermisoComercial");
        string permisoLogistico = await oConfig.ObtenerVariable("PermisoLogistico");
        string idApp = await oConfig.ObtenerVariable("IdApp");
        string urlPortal = await oConfig.ObtenerVariable("urlPortal");
        int sessionTimeout = Convert.ToInt32(await oConfig.ObtenerVariable("sessiontimeout"));

        try
        {
            oPeticion peticion = new oPeticion();

            string token = "";

            var uri = navManager.ToAbsoluteUri(navManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var parametro))
            {
                token = parametro;
            }

            if (!string.IsNullOrEmpty(token))
            {
                peticion.Token = token;
                bool TokenValido = await SSO.ValidarToken(peticion);

                if (TokenValido == true)
                {
                    await EscribirCookie("token", token, sessionTimeout);
                }
                else
                {
                    await BorrarCookie("token");
                }
            }

            token = await LeerCookie("token");

            if (!string.IsNullOrEmpty(token))
            {
                peticion.Token = token;

                Session.Username = await LeerCookie("cuenta");

                if (string.IsNullOrEmpty(Session.Username))
                {
                    peticion = await SSO.ObtenerCuentaPorToken(peticion);

                    if (string.IsNullOrEmpty(peticion.Cuenta))
                    {
                        Session.Error = "No se encontró la cuenta asociada al token.";
                        navManager.NavigateTo("Error");
                        return;
                    }

                    await EscribirCookie("cuenta", peticion.Cuenta, sessionTimeout);
                }
                else
                {
                    peticion.Cuenta = Session.Username;
                }
            }
            else
            {
                string urlportal = urlPortal + "login.aspx?idapp=" + idApp;
                navManager.NavigateTo(urlportal);
                return;
            }

            // ---------------- PERMISOS ----------------

            if (Session.Permisos == null)
            {
                peticion.IdApp = idApp;

                Session.Permisos = await SSO.ObtenerPermisos(peticion);
            }

            if (SSO.ValidarPermiso(Session.Permisos, permisoAcceso) == false)
            {
                Session.Error = "No tiene permisos para acceder a este sitio.";
                navManager.NavigateTo("Error");
                return;
            }

            Session.Comercial = SSO.ValidarPermiso(Session.Permisos, permisoComercial);
            Session.Logistico = SSO.ValidarPermiso(Session.Permisos, permisoLogistico);

            if (Session.Atributos == null)
            {
                Session.Atributos = await SSO.ObtenerAtributos(peticion);
            }

            ValidarVendedor();

            fRender = false;
            StateHasChanged();
        }
        catch (Exception)
        {
        }
    }


    #region COOKIES
    async Task EscribirCookie(string Nombre, string Valor, int MinutosExpiracion)
    {
        await JS.InvokeAsync<string>("blazorExtensions.CrearCookie", Nombre, Valor, MinutosExpiracion);
    }

    async Task BorrarCookie(string Nombre)
    {
        await JS.InvokeAsync<string>("blazorExtensions.BorrarCookie", Nombre);
    }


    async Task<string> LeerCookie(string Nombre)
    {

        string cookie = await JS.InvokeAsync<string>("blazorExtensions.LeerCookie", Nombre);

        if (string.IsNullOrEmpty(cookie))
        {
            return "";
        }
        else
        {
            return cookie;
        }

    }
    #endregion


}
