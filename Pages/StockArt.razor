@page "/stockart"
@inject DbAccess dbaccess

<div class="carga" hidden="@(!hide)">
    <img src="../img/mytruck.svg" style="height: 150px;" />
    <p class="carga" style="margin-top:50px;">Cargando, por favor espere..</p>
</div>

@*loading*@
<LoadTruck Hidden="hidetruck"></LoadTruck>


<div class="mt-2 ml-2" hidden="@hide">

    <div class="d-flex mb-2 justify-content-between mr-1">
        <div class="d-flex">
            <img src="../img/stock.svg" style="height:40px;padding-left:10px;" />
            <h3 class="ml-3 mt-1">Stock de Artículos</h3>
        </div>

        <div class="mt-1"><TextEdit Placeholder=" Busqueda General" @bind-Text="@customFilterValue" /></div>
    </div>

    <div @onmousedown="e=>t=false">

        <div id="fadegrid">
            <DataGrid TItem="SkuStockData"
                      Data="ssd"
                      Responsive="true"
                      Bordered="true"
                      CustomFilter="OnCustomFilter"
                      Striped="true"
                      Narrow="true"
                      PageSize="100"
                      Filterable="true"
                      FilteredDataChanged="Filtrado()"
                      HeaderRowStyling="@(new DataGridRowStyling { Style = "color: grey; font-size: 13px; font-weigth: bold" })"
                      RowStyling="@((a, b) => b.Style = "color: black; font-size: 13px" )"
                      SelectedRowStyling="@( (a, b) => { b.Style = "color: red; font-size: 14px"; b.Color = Color.Warning; } )"
                      @bind-SelectedRow="@selected">

                <DataGridColumns>

                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData._det)" Filterable="false" Width="5%" Sortable="false">
                        <DisplayTemplate>
                            <Icon Name="IconName.SearchPlus" Style="color:gray;padding:10px;cursor:pointer" @onmousedown="@(e => { ShowModal(detalles); LoadSOS(context.SKU); })"></Icon>
                        </DisplayTemplate>
                        <CaptionTemplate>
                            <Icon Name="@("fa-cog")" Class="rotate" Style="padding:10px;color:gray;" @onmousedown="@(e => hidecommands = !hidecommands)" />

                            @*popup comandos grilla*@
                            <div id="slidedown2" class="@(hidecommands ? "hidden" : "")" style="position:absolute;z-index:1;">
                                <div class="card bg-dark p-1">

                                    <div class="card-header text-center p-2">
                                        <h5 class="card-title">Menu</h5>
                                    </div>

                                    <Button Class="m-1 btn btn-dark" Clicked="(async ()=> { hidecommands = !hidecommands; await truck(); await ExportarExcel(); })"><Icon Name="IconName.Share" />  Exportar</Button>

                                </div>
                            </div>

                        </CaptionTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.SKU)" Caption="SKU"></DataGridColumn>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.DESCR)" Caption="DESCR"></DataGridColumn>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.STOCK)" Caption="STOCK" Filterable="false"></DataGridColumn>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.RESERVADO)" Caption="RESERVADO" Filterable="false"></DataGridColumn>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.DISPONIBLE)" Caption="DISPONIBLE" Filterable="false" CellStyle="MyCssFunc"></DataGridColumn>

                </DataGridColumns>

            </DataGrid>
        </div>

    </div>
</div>

<Modal @ref="detalles">
    <ModalBackdrop @onmousedown="(() => HideModal(detalles))" />

    <ModalContent Centered="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Lista de Ordenes que contienen el SKU: @selected.SKU</ModalTitle>
            <CloseButton Clicked="(() => HideModal(detalles))" />
        </ModalHeader>
        <ModalBody>
            <DataGrid TItem="SkuStockData" Data="sos" Responsive="true" ShowPageSizes="true" Bordered="true" Striped="true" Narrow="true">
                <DataGridColumns>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.SKU)" Caption="Orden"></DataGridColumn>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.DESCR)" Caption="Cliente"></DataGridColumn>
                    <DataGridColumn TItem="SkuStockData" Field="@nameof(SkuStockData.STOCK)" Caption="Cantidad"></DataGridColumn>
                </DataGridColumns>
                <EmptyTemplate>
                    <div class="font-weight-bold m-lg-5">No se encuentran registros</div>
                </EmptyTemplate>
            </DataGrid>

        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="(() => HideModal(detalles))">Cerrar</Button>
            <Button Color="Color.Primary" Clicked="(() => HideModal(detalles))">Guardar Cambios</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code
{
    public List<SkuStockData> ssd = new List<SkuStockData>();
    public List<SkuStockData> ssdfiltrado = new List<SkuStockData>();
    public List<SkuStockData> sos = new List<SkuStockData>();
    SkuStockData selected = new SkuStockData();

    private bool t { get; set; } = false;
    private bool hide { get; set; } = true;
    bool hidetruck { get; set; } = true;
    bool hidecommands { get; set; } = false;
    bool vendedor = false;

    string customFilterValue;
    string user = "";

    private Modal detalles;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ssd = await dbaccess.GetSSD();
            await ValidarUsuario();
            hide = !hide;
            firstRender = false;
            await JS.InvokeVoidAsync("rotate");
        }
        StateHasChanged();
    }

    void ValidarVendedor()
    {
        string rpte = "";
        foreach (oAtributo item in Session.Atributos)
        {
            if (item.Atributo == "Representante")
            {
                rpte = item.Valor;
            }
        }

        if (rpte == "TODOS" || rpte == null)
        {
            vendedor = false;
        }
        else
        {
            vendedor = true;
        }

    }

    async Task truck()
    {
        hidetruck = !hidetruck;
        StateHasChanged();
        await Task.Delay(1);
    }

    async Task LoadSOS(string ssd)
    {
        sos = await dbaccess.GetSOS(ssd);
    }

    private void ShowModal(Modal x)
    {
        x.Show();
    }

    private void HideModal(Modal x)
    {
        x.Hide();
    }

    bool OnCustomFilter(SkuStockData sos)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            sos.SKU?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || sos.DESCR?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    async Task ExportarExcel()
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Stock Articulos");

            var tableBody = worksheet.Cells["A1:AR1"].LoadFromCollection(from f in ssdfiltrado select new { f.SKU, f.DESCR, f.STOCK, f.RESERVADO, f.DISPONIBLE }, true);

            var header = worksheet.Cells["A1:E1"];

            tableBody.AutoFilter = true;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.WhiteSmoke);
            header.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.DarkGray);
            header.Style.Font.Color.SetColor(System.Drawing.Color.White);
            worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();//mejorar fondo
            worksheet.Cells[worksheet.Dimension.Address].Style.Border.Top.Style = ExcelBorderStyle.Thin;
            worksheet.Cells[worksheet.Dimension.Address].Style.Border.Left.Style = ExcelBorderStyle.Thin;
            worksheet.Cells[worksheet.Dimension.Address].Style.Border.Right.Style = ExcelBorderStyle.Thin;
            worksheet.Cells[worksheet.Dimension.Address].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
            //string downloadsPath = new KnownFolder(KnownFolderType.Downloads).Path;

            await JS.GuardarComo(DateTime.Today.ToString("yyyyMMdd") + "_ResumenStockCoteminas.xlsx", package.GetAsByteArray());

        }
        await truck();
    }

    protected Func<SkuStockData, string> MyCssFunc = (SkuStockData w) =>
    {
        return "background-color:beige;";
    };

    #region Grilla filtrada
    private Action<IEnumerable<SkuStockData>> Filtrado()
    {
        Action<IEnumerable<SkuStockData>> accion = filtrar;
        return accion;
    }

    private void filtrar(IEnumerable<SkuStockData> o)
    {
        ssdfiltrado = o.ToList();
    }
    #endregion

    #region COOKIES
    async Task EscribirCookie(string Nombre, string Valor, int MinutosExpiracion)
    {
        await JS.InvokeAsync<string>("blazorExtensions.CrearCookie", Nombre, Valor, MinutosExpiracion);
    }

    async Task BorrarCookie(string Nombre)
    {
        await JS.InvokeAsync<string>("blazorExtensions.BorrarCookie", Nombre);
    }


    async Task<string> LeerCookie(string Nombre)
    {

        string cookie = await JS.InvokeAsync<string>("blazorExtensions.LeerCookie", Nombre);

        if (string.IsNullOrEmpty(cookie))
        {
            return "";
        }
        else
        {
            return cookie;
        }

    }
    #endregion

    async Task ValidarUsuario()
    {
        string permisoAcceso = await oConfig.ObtenerVariable("PermisoAcceso");
        string permisoComercial = await oConfig.ObtenerVariable("PermisoComercial");
        string permisoLogistico = await oConfig.ObtenerVariable("PermisoLogistico");
        string idApp = await oConfig.ObtenerVariable("IdApp");
        string urlPortal = await oConfig.ObtenerVariable("urlPortal");
        int sessionTimeout = Convert.ToInt32(await oConfig.ObtenerVariable("sessiontimeout"));

        try
        {
            oPeticion peticion = new oPeticion();

            string token = "";

            var uri = navManager.ToAbsoluteUri(navManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var parametro))
            {
                token = parametro;
            }

            if (!string.IsNullOrEmpty(token))
            {
                peticion.Token = token;
                bool TokenValido = await SSO.ValidarToken(peticion);

                if (TokenValido == true)
                {
                    await EscribirCookie("token", token, sessionTimeout);
                }
                else
                {
                    await BorrarCookie("token");
                }
            }

            token = await LeerCookie("token");

            if (!string.IsNullOrEmpty(token))
            {
                peticion.Token = token;

                user = await LeerCookie("cuenta");

                if (string.IsNullOrEmpty(user))
                {
                    peticion = await SSO.ObtenerCuentaPorToken(peticion);

                    if (string.IsNullOrEmpty(peticion.Cuenta))
                    {
                        Session.Error = "No se encontró la cuenta asociada al token.";
                        navManager.NavigateTo("Error");
                        return;
                    }

                    await EscribirCookie("cuenta", peticion.Cuenta, sessionTimeout);
                }
                else
                {
                    peticion.Cuenta = user;
                }
            }
            else
            {
                string urlportal = urlPortal + "login.aspx?idapp=" + idApp;
                navManager.NavigateTo(urlportal);
                return;
            }

            // ---------------- PERMISOS ----------------

            if (Session.Permisos == null)
            {
                peticion.IdApp = idApp;

                Session.Permisos = await SSO.ObtenerPermisos(peticion);
            }

            if (SSO.ValidarPermiso(Session.Permisos, permisoAcceso) == false)
            {
                Session.Error = "No tiene permisos para acceder a este sitio.";
                navManager.NavigateTo("Error");
                return;
            }

            Session.Comercial = SSO.ValidarPermiso(Session.Permisos, permisoComercial);
            Session.Logistico = SSO.ValidarPermiso(Session.Permisos, permisoLogistico);

            if (Session.Atributos == null)
            {
                Session.Atributos = await SSO.ObtenerAtributos(peticion);
            }

            ValidarVendedor();


            if (vendedor == true)
            {
                Session.Error = "No tiene permisos para acceder a este sitio.";
                navManager.NavigateTo("Error");
                return;
            }

            hidetruck = true;

            StateHasChanged();
        }
        catch (Exception)
        {
        }
    }


}
